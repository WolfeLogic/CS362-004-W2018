ASSIGNMENT 3 TEST RESULTS: 

UNIT TEST 1: SHUFFLE() FUNCTION

Player's DECK COUNT = 0
	PASSED 

Player's DECK COUNT = 10
	PASSED 

Deck shuffled by shuffle() function
	FAILED 

SHUFFLE(): ONE OR MORE TESTS FAILED. SEE OUTPUT
FAILURES: 1


UNIT TEST 2: GAINCARD() FUNCTION

GOLD = 0
	PASSED 

+1 to DECK COUNT
	PASSED 

+1 to DISCARD COUNT
	PASSED 

+1 to HAND COUNT
	PASSED 

Decrease gold supply
	PASSED 

GAINCARD(): ALL TESTS COMPLETED SUCCESSFULLY!


UNIT TEST 3: UPDATECOINS() FUNCTION


BONUS: 1
HAND COUNT: 0

COINT COUNT - COPPER
Expected output: 1
Actual output: 1
	PASSED 

COINT COUNT - SILVER
Expected output: 1
Actual output: 1
	PASSED 

COINT COUNT - GOLD
Expected output: 1
Actual output: 1
	PASSED 


BONUS: 3
HAND COUNT: 5

COINT COUNT - COPPER
Expected output: 8
Actual output: 3
	FAILED 

COINT COUNT - SILVER
Expected output: 13
Actual output: 3
	FAILED 

COINT COUNT - GOLD
Expected output: 18
Actual output: 3
	FAILED 

UPDATECOINS(): ONE OR MORE TESTS FAILED. SEE OUTPUT
FAILURES: 3


UNIT TEST 4: ISGAMEOVER() FUNCTION

PROVINCE count = 0
	PASSED 

Each of 3 piles in supplyCount = 0
	PASSED 

PROVINCE count NOT EMPTY

Each of 3 piles in supplyCount = 1
	PASSED 

ISGAMEOVER(): ALL TESTS COMPLETED SUCCESSFULLY!


CARD TEST 1: SMITHY
	FAIL: Incorrect HAND COUNT after playing SMITHY. 
	 Expected output 7, actual output 8
	FAIL: Incorrect DECK COUNT after playing SMITHY. 
	 Expected output 2, actual output 1
	FAIL: Incorrect SCORE after playing SMITHY. 
	 Expected output 1, actual output 2
	PASS: PLAYER-2's HAND COUNT correct after PLAYER-1 played SMITHY
	PASS: PLAYER-2's DECK COUNT correct after PLAYER-1 played SMITHY
	PASS: PLAYER-2's SCORE correct after PLAYER-1 played SMITHY
	PASS: Correct number of ESTATE cards after playing SMITHY
	PASS: Correct number of DUCHY cards after playing SMITHY
	PASS: Correct number of PROVINCE cards after playing SMITHY
	PASS: Inital card count #0 contains initial number of cards
	PASS: Inital card count #1 contains initial number of cards
	PASS: Inital card count #2 contains initial number of cards
	PASS: Inital card count #3 contains initial number of cards
	PASS: Inital card count #4 contains initial number of cards
	PASS: Inital card count #5 contains initial number of cards
	PASS: Inital card count #6 contains initial number of cards
	PASS: Inital card count #7 contains initial number of cards
	PASS: Inital card count #8 contains initial number of cards
	PASS: Inital card count #9 contains initial number of cards

SMITHY: ONE OR MORE TESTS FAILED. SEE OUTPUT


CARD TEST 2: ADVENTURER
	PASS: Correct hand count after playing adventurer (+2)
	PASS: TREASURE card was taken first
	PASS: TREASURE card was second draw
	FAIL: Incorrect DECK COUNT after playing ADVENTURER. 
	 Expected output 3, actual output 4
	PASS: Correct SCORE for ADVENTURER (no change)
	PASS: PLAYER-2's HAND COUNT correct after PLAYER-1 played ADVENTURER
	PASS: PLAYER-2's DECK COUNT correct after PLAYER-1 played ADVENTURER (no change)
	PASS: PLAYER-2's SCORE correct after PLAYER-1 played ADVENTURER (no change)
	PASS: Correct number of ESTATE cards after playing ADVENTURER (no change)
	PASS: Correct number of DUCHY cards after playing ADVENTURER (no change)
	PASS: Correct number of PROVINCE cards after playing ADVENTURER (no change)
	PASS: Inital card count #0 contains initial number of cards
	PASS: Inital card count #1 contains initial number of cards
	PASS: Inital card count #2 contains initial number of cards
	PASS: Inital card count #3 contains initial number of cards
	PASS: Inital card count #4 contains initial number of cards
	PASS: Inital card count #5 contains initial number of cards
	PASS: Inital card count #6 contains initial number of cards
	PASS: Inital card count #7 contains initial number of cards
	PASS: Inital card count #8 contains initial number of cards
	PASS: Inital card count #9 contains initial number of cards

ADVENTURER: ONE OR MORE TESTS FAILED. SEE OUTPUT


CARD TEST 3: COUNCIL ROOM

PLAYER-1 gains 4 cards
	PASSED 

PLAYER-1 gains 4 cards from his own pile
	PASSED 

PLAYER-1 number of buys increments
	FAILED 

Expecting no change to following VICTORY card piles
PROVICE Pile
	PASSED 
DUCHY Pile
	PASSED 
ESTATE Pile
	PASSED 

Expecting no change to testCards supplyCount
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 
Comparing gameState w/ testCpy supplyCount
	PASSED 

PLAYER-2 expected to gain 1 card
	PASSED 

PLAYER-2 expected to gain 1 from PLAYER-2 own deck
	PASSED 

COUNCIL ROOM: ONE OR MORE TESTS FAILED. SEE OUTPUT
	FAILURES: 1

CARD TEST 4: VILLAGE
	PASS: Correct HAND COUNT for VILLAGE (no change)
	PASS: Correct DECK COUNT for VILLAGE (-1)
	PASS: Correct SCORE for VILLAGE (no change)
	FAIL: Incorrect ACTIONS count after playing VILLAGE.
	 Expected output 3, actual output 5
	PASS: PLAYER-2's HAND COUNT correct after PLAYER-1 played VILLAGE
	PASS: PLAYER-2's DECK COUNT correct after PLAYER-1 played VILLAGE
	PASS: PLAYER-2's SCORE correct after PLAYER-1 played VILLAGE
	PASS: Correct number of ESTATE cards after playing VILLAGE
	PASS: Correct number of DUCHY cards after playing VILLAGE
	PASS: Correct number of PROVINCE cards after playing VILLAGE
	PASS: Inital card count #0 contains initial number of cards
	PASS: Inital card count #1 contains initial number of cards
	PASS: Inital card count #2 contains initial number of cards
	PASS: Inital card count #3 contains initial number of cards
	PASS: Inital card count #4 contains initial number of cards
	PASS: Inital card count #5 contains initial number of cards
	PASS: Inital card count #6 contains initial number of cards
	PASS: Inital card count #7 contains initial number of cards
	PASS: Inital card count #8 contains initial number of cards
	PASS: Inital card count #9 contains initial number of cards

VILLAGE: ONE OR MORE TESTS FAILED. SEE OUTPUT

GCOV BRANCH PROBABILITIES & FUNCTION SUMMARIES: 
Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:5.37% of 205
Branches executed:12.85% of 179
Taken at least once:3.35% of 179
Calls executed:8.62% of 58

Function 'smithy_card'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'adventurer_card'
Lines executed:100.00% of 18
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 3

Function 'council_room_card'
Lines executed:100.00% of 9
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 4

Function 'village_card'
Lines executed:100.00% of 6
No branches
Calls executed:100.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:23.33% of 30
Branches executed:100.00% of 28
Taken at least once:17.86% of 28
No calls

Function 'drawCard'
Lines executed:95.45% of 22
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 24
Branches executed:100.00% of 42
Taken at least once:69.05% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:100.00% of 20
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:76.92% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:48.22% of 562
Branches executed:53.96% of 417
Taken at least once:36.93% of 417
Calls executed:39.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 976 returned 100% blocks executed 100%
      976:    8:int compare(const void* a, const void* b) {
      976:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      336:   10:    return 1;
      640:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      170:   12:    return -1;
      470:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10 returned 100% blocks executed 88%
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
call    0 returned 100%
       10:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:  114:		{
       26:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       13:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       87:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       20:  156:      if (shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 39 returned 100% blocks executed 100%
       39:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       39:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       39:  209:  if (state->deckCount[player] < 1)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        2:  210:    return -1;
       37:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      518:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      444:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      444:  216:    newDeck[newDeckPos] = state->deck[player][card];
      444:  217:    newDeckPos++;
     2015:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
     1571:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      444:  221:    state->deckCount[player]--;
        -:  222:  }
      481:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      444:  224:    state->deck[player][i] = newDeck[i];
      444:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       37:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 48 returned 100% blocks executed 80%
       48:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       48:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       48:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       48:  243:  if ( state->numActions < 1 )
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -:  244:    {
       39:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        9:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        9:  252:  if (card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        9:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        9:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        9:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        9:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 40 returned 100% blocks executed 79%
       40:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       40:  280:  who = state->whoseTurn;
        -:  281:
       40:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       40:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       40:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       40:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       40:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
       40:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       40:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       40:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 307 returned 100% blocks executed 100%
      307:  311:int numHandCards(struct gameState *state) {
      307:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 617 returned 100% blocks executed 100%
      617:  315:int handCard(int handPos, struct gameState *state) {
      617:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      617:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 85 returned 100% blocks executed 100%
       85:  320:int supplyCount(int card, struct gameState *state) {
       85:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1030 returned 100% blocks executed 100%
     1030:  346:int whoseTurn(struct gameState *state) {
     1030:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 40 returned 100% blocks executed 100%
       40:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       40:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
      253:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      213:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      213:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       40:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       40:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       20:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       20:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       40:  370:  state->outpostPlayed = 0;
       40:  371:  state->phase = 0;
       40:  372:  state->numActions = 1;
       40:  373:  state->coins = 0;
       40:  374:  state->numBuys = 1;
       40:  375:  state->playedCardCount = 0;
       40:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      240:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      200:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       40:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       40:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 44 returned 100% blocks executed 100%
       44:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       44:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       42:  401:  j = 0;
     1092:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     1050:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
       42:  409:  if ( j >= 3)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
       41:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 16 returned 100% blocks executed 68%
       16:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       16:  420:  int score = 0;
        -:  421:  //score from hand
       68:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  423:    {
       52:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       52:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
       52:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       52:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       52:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       52:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       46:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
        -:  434:    {
       30:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       30:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       30:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       46:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
        -:  445:    {
       30:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       30:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       30:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
       16:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 277 returned 100% blocks executed 92%
      277:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      277:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      239:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      224:  534:      state->deck[player][i] = state->discard[player][i];
      224:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       15:  538:    state->deckCount[player] = state->discardCount[player];
       15:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       15:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       15:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       15:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       15:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       15:  559:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
       15:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:    state->deckCount[player]--;
       15:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else
        -:  568:  {
      262:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
      262:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
      262:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      262:  577:    state->deckCount[player]--;
      262:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
      277:  581:  return 0;
        -:  582:}
        -:  583:
function getCost called 80 returned 100% blocks executed 23%
       80:  584:int getCost(int cardNumber)
        -:  585:{
       80:  586:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 20%
branch  4 taken 0%
branch  5 taken 38%
branch  6 taken 33%
branch  7 taken 5%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 5%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
       16:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
       30:  599:      return 3;
        -:  600:    case gold:
       26:  601:      return 6;
        -:  602:    case adventurer:
        4:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
        4:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
        -:  647:/*****************************  A2 REFACTOR  *********************************/
        -:  648://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  649:    int great_hall_card(int handPos, struct gameState *state) 
        -:  650:    {
    #####:  651:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  652:
    #####:  653:      drawCard(currentPlayer, state);
call    0 never executed
        -:  654:
        -:  655:    // provides another action turn
    #####:  656:      state->numActions++;
        -:  657:
        -:  658:    // played card to discard pile
    #####:  659:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  660:      return 0;
        -:  661:    }
        -:  662:
        -:  663://A2 Refactor
function village_card called 1 returned 100% blocks executed 100%
        1:  664:    int village_card(int handPos, struct gameState *state) 
        -:  665:    {
        1:  666:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  667:
        1:  668:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  669:
        -:  670:    //BUG: Should only provide 2 action turns
        1:  671:      state->numActions = state->numActions + 4;
        -:  672:
        -:  673:    // played card to discard pile
        1:  674:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  675:      return 0;
        -:  676:    }
        -:  677:
        -:  678://A2 Refactor
function council_room_card called 1 returned 100% blocks executed 100%
        1:  679:    int council_room_card(int handPos, struct gameState *state) 
        -:  680:    {
        -:  681:      int i;
        1:  682:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  683:
        -:  684:    // draw 4 cards
        5:  685:      for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  686:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  687:      }
        -:  688:
        -:  689:    //BUG: Card provides another buy turn 
        -:  690:    //state->numBuys++;      
        -:  691:
        -:  692:    // all other players draw a card
        3:  693:      for (i = 0; i < state->numPlayers; i++) 
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  694:      {
        2:  695:        if (i != currentPlayer) 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  696:        {
        1:  697:          drawCard(i, state);
call    0 returned 100%
        -:  698:        }
        -:  699:      }
        -:  700:    // played card to discard pile
        1:  701:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  702:      return 0;
        -:  703:    }
        -:  704:
        -:  705://A2 Refactor
function adventurer_card called 8 returned 100% blocks executed 100%
        8:  706:    int adventurer_card(struct gameState *state) 
        -:  707:    {
        8:  708:      int z = 0;
        -:  709:      int cardDrawn;
        8:  710:      int drawntreasure = 0;
        8:  711:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  712:      int temphand[MAX_HAND];
        -:  713:
       25:  714:    while (drawntreasure < 2) 
branch  0 taken 53%
branch  1 taken 47% (fallthrough)
        -:  715:    { // when the deck is empty, reshuffle the discard and make it the deck
        9:  716:      if (state->deckCount[currentPlayer] < 1) 
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  717:      {
        1:  718:        shuffle(currentPlayer, state);
call    0 returned 100%
        -:  719:      }
        9:  720:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  721:        // defines the drawn card as the top card
        9:  722:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        9:  723:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        -:  724:        //drawntreasure++;
        -:  725:        //BUG: increments by 4. Should increment by 1
        8:  726:        drawntreasure += 4;
        -:  727:      else 
        -:  728:      {
        1:  729:        temphand[z] = cardDrawn;
        -:  730:            // removes the most recently drawn (top) card
        1:  731:        state->handCount[currentPlayer]--;
        1:  732:        z++;
        -:  733:      }
        -:  734:    }
       17:  735:    while (z - 1 >= 0) 
branch  0 taken 11%
branch  1 taken 89% (fallthrough)
        -:  736:    {
        -:  737:        // discard all cards in play that have been drawn
        1:  738:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
        1:  739:      z = z - 1;
        -:  740:    }
        8:  741:    return 0;
        -:  742:  }
        -:  743:
        -:  744://A2 Refactor
function smithy_card called 3 returned 100% blocks executed 100%
        3:  745:  int smithy_card(int handPos, struct gameState *state) 
        -:  746:  {
        -:  747:    int i;
        3:  748:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  749:    //BUG: Should only draw 3 cards  
       15:  750:    for (i = 0; i < 4; i++) 
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  751:    {
       12:  752:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  753:    }
        -:  754:    //discard card from hand
        3:  755:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:  756:    return 0;
        -:  757:  }
        -:  758:/*****************************  A2 REFACTOR  *********************************/
        -:  759:
function cardEffect called 13 returned 100% blocks executed 4%
       13:  760:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  761:{
        -:  762:  int i;
        -:  763:  int j;
        -:  764:  int k;
        -:  765:  int x;
        -:  766:  int index;
       13:  767:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       13:  768:  int nextPlayer = currentPlayer + 1;
        -:  769:
       13:  770:  int tributeRevealedCards[2] = {-1, -1};
        -:  771:  int temphand[MAX_HAND];// moved above the if statement
        -:  772:  //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  773:  //int cardDrawn; // commented out as part of A2 Refactor
        -:  774:  //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
       13:  775:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
        7:  776:    nextPlayer = 0;
        -:  777:  }
        -:  778:  
        -:  779:	
        -:  780:  //uses switch to select card and perform actions
       13:  781:  switch( card ) 
branch  0 taken 62%
branch  1 taken 8%
branch  2 taken 23%
branch  3 taken 8%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  782:    {
        -:  783:/*****************************  A2 REFACTOR  *********************************/
        -:  784:      // A2 Refactor
        -:  785:      case adventurer:
        8:  786:      return adventurer_card(state);
call    0 returned 100%
        -:  787:
        -:  788:      // A2 Refactor
        -:  789:      case council_room:
        1:  790:      return council_room_card(handPos, state);
call    0 returned 100%
        -:  791:
        -:  792:      // A2 Refactor  
        -:  793:      case smithy:
        3:  794:      return smithy_card(handPos, state);
call    0 returned 100%
        -:  795:
        -:  796:      // A2 Refactor
        -:  797:      case village:
        1:  798:      return village_card(handPos, state);
call    0 returned 100%
        -:  799:
        -:  800:      // A2 Refactor
        -:  801:      case great_hall:
    #####:  802:      return great_hall_card(handPos, state);
call    0 never executed
        -:  803:
        -:  804:/*****************************  A2 REFACTOR  *********************************/
        -:  805:			
        -:  806:    case feast:
        -:  807:      //gain card with cost up to 5
        -:  808:      //Backup hand
    #####:  809:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  810:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  811:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  812:      }
        -:  813:      //Backup hand
        -:  814:
        -:  815:      //Update Coins for Buy
    #####:  816:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  817:      x = 1;//Condition to loop on
    #####:  818:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  819:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  820:	  if (DEBUG)
        -:  821:	    printf("None of that card left, sorry!\n");
        -:  822:
        -:  823:	  if (DEBUG){
        -:  824:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  825:	  }
        -:  826:	}
    #####:  827:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  832:	  }
        -:  833:	}
        -:  834:	else{
        -:  835:
        -:  836:	  if (DEBUG){
        -:  837:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  838:	  }
        -:  839:
    #####:  840:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  841:	  x = 0;//No more buying cards
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        -:  847:	}
        -:  848:      }     
        -:  849:
        -:  850:      //Reset Hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  852:	state->hand[currentPlayer][i] = temphand[i];
    #####:  853:	temphand[i] = -1;
        -:  854:      }
        -:  855:      //Reset Hand
        -:  856:      			
    #####:  857:      return 0;
        -:  858:			
        -:  859:    case gardens:
    #####:  860:      return -1;
        -:  861:			
        -:  862:    case mine:
    #####:  863:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  864:
    #####:  865:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:		
    #####:  870:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  876:	{
    #####:  877:	  return -1;
        -:  878:	}
        -:  879:
    #####:  880:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  881:
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  884:
        -:  885:      //discard trashed card
    #####:  886:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  891:	      break;
        -:  892:	    }
        -:  893:	}
        -:  894:			
    #####:  895:      return 0;
        -:  896:			
        -:  897:    case remodel:
    #####:  898:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  899:
    #####:  900:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  901:	{
    #####:  902:	  return -1;
        -:  903:	}
        -:  904:
    #####:  905:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  909:
        -:  910:      //discard trashed card
    #####:  911:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  912:	{
    #####:  913:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  914:	    {
    #####:  915:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  916:	      break;
        -:  917:	    }
        -:  918:	}
        -:  919:
        -:  920:
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  935:	    }
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
        -:  939:	  }
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  949:		isGameOver(state);
call    0 never executed
        -:  950:	      }
        -:  951:	    }
    #####:  952:	    card_not_discarded = 0;//Exit the loop
        -:  953:	  }
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
        -:  957:	  }
        -:  958:	}
        -:  959:      }
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  966:	    isGameOver(state);
call    0 never executed
        -:  967:	  }
        -:  968:	}
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case minion:
        -:  975:      //+1 action
    #####:  976:      state->numActions++;
        -:  977:			
        -:  978:      //discard card from hand
    #####:  979:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  980:			
    #####:  981:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  state->coins = state->coins + 2;
        -:  984:	}
        -:  985:			
    #####:  986:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  987:	{
        -:  988:	  //discard hand
    #####:  989:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  990:	    {
    #####:  991:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  992:	    }
        -:  993:				
        -:  994:	  //draw 4
    #####:  995:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  998:	    }
        -:  999:				
        -: 1000:	  //other players discard hand and redraw if hand size > 4
    #####: 1001:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1004:		{
    #####: 1005:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1006:		    {
        -: 1007:		      //discard hand
    #####: 1008:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1009:			{
    #####: 1010:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1011:			}
        -: 1012:							
        -: 1013:		      //draw 4
    #####: 1014:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:			{
    #####: 1016:			  drawCard(i, state);
call    0 never executed
        -: 1017:			}
        -: 1018:		    }
        -: 1019:		}
        -: 1020:	    }
        -: 1021:				
        -: 1022:	}
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case steward:
    #####: 1026:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
        -: 1028:	  //+2 cards
    #####: 1029:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1031:	}
    #####: 1032:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 coins
    #####: 1035:	  state->coins = state->coins + 2;
        -: 1036:	}
        -: 1037:      else
        -: 1038:	{
        -: 1039:	  //trash 2 cards in hand
    #####: 1040:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1041:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1042:	}
        -: 1043:			
        -: 1044:      //discard card from hand
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case tribute:
    #####: 1049:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1050:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1051:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	  state->deckCount[nextPlayer]--;
        -: 1053:	}
    #####: 1054:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1056:	  state->discardCount[nextPlayer]--;
        -: 1057:	}
        -: 1058:	else{
        -: 1059:	  //No Card to Reveal
        -: 1060:	  if (DEBUG){
        -: 1061:	    printf("No cards to reveal\n");
        -: 1062:	  }
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
        -: 1066:      else{
    #####: 1067:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1068:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1069:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1070:	    state->deckCount[nextPlayer]++;
    #####: 1071:	    state->discard[nextPlayer][i] = -1;
    #####: 1072:	    state->discardCount[nextPlayer]--;
        -: 1073:	  }
        -: 1074:			    
    #####: 1075:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1076:	} 
    #####: 1077:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
    #####: 1080:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1081:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1082:	state->deckCount[nextPlayer]--;
        -: 1083:      }    
        -: 1084:		       
    #####: 1085:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1086:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1087:	state->playedCardCount++;
    #####: 1088:	tributeRevealedCards[1] = -1;
        -: 1089:      }
        -: 1090:
    #####: 1091:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1092:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1093:	  state->coins += 2;
        -: 1094:	}
        -: 1095:		    
    #####: 1096:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1097:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1099:	}
        -: 1100:	else{//Action Card
    #####: 1101:	  state->numActions = state->numActions + 2;
        -: 1102:	}
        -: 1103:      }
        -: 1104:	    
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case ambassador:
    #####: 1108:      j = 0;		//used to check if player has enough cards to discard
        -: 1109:
    #####: 1110:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
    #####: 1115:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  return -1;
        -: 1118:	}
        -: 1119:
    #####: 1120:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1123:	    {
    #####: 1124:	      j++;
        -: 1125:	    }
        -: 1126:	}
    #####: 1127:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  return -1;				
        -: 1130:	}
        -: 1131:
        -: 1132:      if (DEBUG) 
        -: 1133:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1134:
        -: 1135:      //increase supply count for choosen card by amount being discarded
    #####: 1136:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1137:			
        -: 1138:      //each other player gains a copy of revealed card
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1144:	    }
        -: 1145:	}
        -: 1146:
        -: 1147:      //discard played card from hand
    #####: 1148:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1149:
        -: 1150:      //trash copies of cards returned to supply
    #####: 1151:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1156:		{
    #####: 1157:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1158:		  break;
        -: 1159:		}
        -: 1160:	    }
        -: 1161:	}			
        -: 1162:
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case cutpurse:
        -: 1166:
    #####: 1167:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1168:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1169:	{
    #####: 1170:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1171:	    {
    #####: 1172:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1173:		{
    #####: 1174:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1175:		    {
    #####: 1176:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1177:		      break;
        -: 1178:		    }
    #####: 1179:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1180:		    {
    #####: 1181:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1182:			{
        -: 1183:			  if (DEBUG)
        -: 1184:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1185:			}	
    #####: 1186:		      break;
        -: 1187:		    }		
        -: 1188:		}
        -: 1189:					
        -: 1190:	    }
        -: 1191:				
        -: 1192:	}				
        -: 1193:
        -: 1194:      //discard played card from hand
    #####: 1195:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1196:
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:		
        -: 1200:    case embargo: 
        -: 1201:      //+2 Coins
    #####: 1202:      state->coins = state->coins + 2;
        -: 1203:			
        -: 1204:      //see if selected pile is in play
    #####: 1205:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1206:	{
    #####: 1207:	  return -1;
        -: 1208:	}
        -: 1209:			
        -: 1210:      //add embargo token to selected supply pile
    #####: 1211:      state->embargoTokens[choice1]++;
        -: 1212:			
        -: 1213:      //trash card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case outpost:
        -: 1218:      //set outpost flag
    #####: 1219:      state->outpostPlayed++;
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case salvager:
        -: 1226:      //+1 buy
    #####: 1227:      state->numBuys++;
        -: 1228:			
    #####: 1229:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
        -: 1231:	  //gain coins equal to trashed card
    #####: 1232:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1233:	  //trash card
    #####: 1234:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1235:	}
        -: 1236:			
        -: 1237:      //discard card
    #####: 1238:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1239:      return 0;
        -: 1240:		
        -: 1241:    case sea_hag:
    #####: 1242:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1243:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1244:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1245:	  state->discardCount[i]++;
    #####: 1246:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1247:	}
        -: 1248:      }
    #####: 1249:      return 0;
        -: 1250:		
        -: 1251:    case treasure_map:
        -: 1252:      //search hand for another treasure_map
    #####: 1253:      index = -1;
    #####: 1254:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1255:	{
    #####: 1256:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1257:	    {
    #####: 1258:	      index = i;
    #####: 1259:	      break;
        -: 1260:	    }
        -: 1261:	}
    #####: 1262:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1263:	{
        -: 1264:	  //trash both treasure cards
    #####: 1265:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1266:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1267:
        -: 1268:	  //gain 4 Gold cards
    #####: 1269:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1270:	    {
    #####: 1271:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1272:	    }
        -: 1273:				
        -: 1274:	  //return success
    #####: 1275:	  return 1;
        -: 1276:	}
        -: 1277:			
        -: 1278:      //no second treasure_map found in hand
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:	
    #####: 1282:  return -1;
        -: 1283:}
        -: 1284:
function discardCard called 5 returned 100% blocks executed 78%
        5: 1285:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1286:{
        -: 1287:	
        -: 1288:  //if card is not trashed, added to Played pile 
        5: 1289:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1290:    {
        -: 1291:      //add card to played pile
        5: 1292:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1293:      state->playedCardCount++;
        -: 1294:    }
        -: 1295:	
        -: 1296:  //set played card to -1
        5: 1297:  state->hand[currentPlayer][handPos] = -1;
        -: 1298:	
        -: 1299:  //remove card from player's hand
        5: 1300:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1301:    {
        -: 1302:      //reduce number of cards in hand
    #####: 1303:      state->handCount[currentPlayer]--;
        -: 1304:    }
        5: 1305:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1306:    {
        -: 1307:      //reduce number of cards in hand
    #####: 1308:      state->handCount[currentPlayer]--;
        -: 1309:    }
        -: 1310:  else 	
        -: 1311:    {
        -: 1312:      //replace discarded card with last card in hand
        5: 1313:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1314:      //set last card to -1
        5: 1315:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1316:      //reduce number of cards in hand
        5: 1317:      state->handCount[currentPlayer]--;
        -: 1318:    }
        -: 1319:	
        5: 1320:  return 0;
        -: 1321:}
        -: 1322:
function gainCard called 45 returned 100% blocks executed 100%
       45: 1323:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1324:{
        -: 1325:  //Note: supplyPos is enum of choosen card
        -: 1326:	
        -: 1327:  //check if supply pile is empty (0) or card is not used in game (-1)
       45: 1328:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -: 1329:    {
        1: 1330:      return -1;
        -: 1331:    }
        -: 1332:	
        -: 1333:  //added card for [whoseTurn] current player:
        -: 1334:  // toFlag = 0 : add to discard
        -: 1335:  // toFlag = 1 : add to deck
        -: 1336:  // toFlag = 2 : add to hand
        -: 1337:
       44: 1338:  if (toFlag == 1)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1339:    {
        1: 1340:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1341:      state->deckCount[player]++;
        -: 1342:    }
       43: 1343:  else if (toFlag == 2)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1344:    {
        1: 1345:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1346:      state->handCount[player]++;
        -: 1347:    }
        -: 1348:  else
        -: 1349:    {
       42: 1350:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       42: 1351:      state->discardCount[player]++;
        -: 1352:    }
        -: 1353:	
        -: 1354:  //decrease number in supply pile
       44: 1355:  state->supplyCount[supplyPos]--;
        -: 1356:	 
       44: 1357:  return 0;
        -: 1358:}
        -: 1359:
function updateCoins called 65 returned 100% blocks executed 100%
       65: 1360:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1361:{
        -: 1362:  int i;
        -: 1363:	
        -: 1364:  //reset coin count
       65: 1365:  state->coins = 0;
        -: 1366:
        -: 1367:  //add coins for each Treasure card in player's hand
      388: 1368:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1369:    {
      323: 1370:      if (state->hand[player][i] == copper)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 1371:	{
      142: 1372:	  state->coins += 1;
        -: 1373:	}
      181: 1374:      else if (state->hand[player][i] == silver)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1375:	{
       61: 1376:	  state->coins += 2;
        -: 1377:	}
      120: 1378:      else if (state->hand[player][i] == gold)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1379:	{
       26: 1380:	  state->coins += 3;
        -: 1381:	}	
        -: 1382:    }	
        -: 1383:
        -: 1384:  //add bonus
       65: 1385:  state->coins += bonus;
        -: 1386:
       65: 1387:  return 0;
        -: 1388:}
        -: 1389:
        -: 1390:
        -: 1391://end of dominion.c
        -: 1392:
